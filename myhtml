<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Windows 11 AI Chat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --win-bg: #f3f3f3;
            --win-accent: #0078d7;
            --win-text: #323130;
            --win-card: #ffffff;
            --win-border: #e5e5e5;
            --win-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --win-radius: 8px;
            --ai-color: #10a37f;
        }

        body {
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            background-color: var(--win-bg);
            color: var(--win-text);
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }

        .chat-header {
            padding: 16px 24px;
            background-color: var(--win-card);
            border-bottom: 1px solid var(--win-border);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .chat-header img {
            width: 32px;
            height: 32px;
        }

        .chat-header h1 {
            font-size: 18px;
            font-weight: 600;
            margin: 0;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .message {
            max-width: 70%;
            padding: 12px 16px;
            border-radius: var(--win-radius);
            background-color: var(--win-card);
            box-shadow: var(--win-shadow);
            animation: fadeIn 0.3s ease-out;
        }

        .message.sent {
            align-self: flex-end;
            background-color: var(--win-accent);
            color: white;
            border-top-right-radius: 4px;
        }

        .message.received {
            align-self: flex-start;
            border-top-left-radius: 4px;
        }

        .message.ai {
            background-color: rgba(16, 163, 127, 0.1);
            border-left: 3px solid var(--ai-color);
        }

        .message-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 4px;
        }

        .message-sender {
            font-weight: 600;
            font-size: 14px;
        }

        .message-sender.ai {
            color: var(--ai-color);
        }

        .message-time {
            font-size: 12px;
            opacity: 0.8;
        }

        .message-content {
            font-size: 15px;
            line-height: 1.4;
        }

        .typing-indicator {
            display: inline-flex;
            gap: 4px;
            align-items: flex-end;
            height: 20px;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background-color: var(--ai-color);
            border-radius: 50%;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) {
            animation-delay: 0s;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        .chat-input-area {
            padding: 16px;
            background-color: var(--win-card);
            border-top: 1px solid var(--win-border);
            display: flex;
            gap: 8px;
            align-items: flex-end;
        }

        .chat-input {
            flex: 1;
            border: 1px solid var(--win-border);
            border-radius: var(--win-radius);
            padding: 12px 16px;
            font-family: inherit;
            font-size: 15px;
            resize: none;
            min-height: 24px;
            max-height: 120px;
            outline: none;
            transition: border-color 0.2s;
        }

        .chat-input:focus {
            border-color: var(--win-accent);
        }

        .chat-button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: transparent;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: var(--win-text);
            transition: background-color 0.2s;
        }

        .chat-button:hover {
            background-color: rgba(0, 0, 0, 0.04);
        }

        .chat-button:active {
            background-color: rgba(0, 0, 0, 0.08);
        }

        .chat-button.primary {
            background-color: var(--win-accent);
            color: white;
        }

        .chat-button.primary:hover {
            background-color: #106ebe;
        }

        .chat-button.primary:active {
            background-color: #005a9e;
        }

        .emoji-picker {
            position: absolute;
            bottom: 80px;
            right: 20px;
            background-color: var(--win-card);
            border-radius: var(--win-radius);
            box-shadow: var(--win-shadow);
            padding: 12px;
            width: 300px;
            display: none;
            z-index: 100;
        }

        .emoji-picker.show {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            gap: 8px;
        }

        .emoji-option {
            font-size: 20px;
            cursor: pointer;
            text-align: center;
            padding: 4px;
            border-radius: 4px;
        }

        .emoji-option:hover {
            background-color: rgba(0, 0, 0, 0.04);
        }

        .api-key-container {
            padding: 12px 16px;
            background-color: var(--win-card);
            border-bottom: 1px solid var(--win-border);
            display: flex;
            gap: 8px;
        }

        .api-key-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid var(--win-border);
            border-radius: var(--win-radius);
            font-family: inherit;
            font-size: 14px;
        }

        .save-key-btn {
            padding: 8px 16px;
            background-color: var(--win-accent);
            color: white;
            border: none;
            border-radius: var(--win-radius);
            cursor: pointer;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(8px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-5px); }
        }

        /* Windows 11 scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <img src="https://upload.wikimedia.org/wikipedia/commons/5/5f/Windows_logo_-_2012.svg" alt="Windows Logo">
            <h1>Windows AI Assistant</h1>
        </div>

        <div class="api-key-container">
            <input type="password" class="api-key-input" id="api-key-input" placeholder="Enter your OpenAI API key">
            <button class="save-key-btn" id="save-key-btn">Save</button>
        </div>

        <div class="chat-messages" id="chat-messages">
            <div class="message ai">
                <div class="message-header">
                    <span class="message-sender ai">AI Assistant</span>
                    <span class="message-time">Just now</span>
                </div>
                <div class="message-content">
                    Hello! I'm your Windows AI assistant. How can I help you today?
                </div>
            </div>
        </div>

        <div class="chat-input-area">
            <button class="chat-button" id="emoji-button">
                <i class="far fa-smile"></i>
            </button>
            <div class="emoji-picker" id="emoji-picker">
                <!-- Emojis will be added by JavaScript -->
            </div>
            <textarea class="chat-input" id="message-input" placeholder="Type a message" rows="1"></textarea>
            <button class="chat-button primary" id="send-button">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>

    <script>
        // Emoji list
        const emojis = ['😀', '😂', '😍', '🤔', '😎', '🥳', '😢', '😡', 
                       '👍', '👎', '❤️', '🔥', '🎉', '💯', '👀', '✨',
                       '🐶', '🐱', '🦄', '🐮', '🦁', '🐯', '🐵', '🐷',
                       '🍎', '🍕', '🍔', '🍟', '🍦', '🍩', '☕', '🍺'];

        // DOM elements
        const emojiButton = document.getElementById('emoji-button');
        const emojiPicker = document.getElementById('emoji-picker');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const chatMessages = document.getElementById('chat-messages');
        const apiKeyInput = document.getElementById('api-key-input');
        const saveKeyBtn = document.getElementById('save-key-btn');

        // Load saved API key
        const savedApiKey = localStorage.getItem('openai-api-key');
        if (savedApiKey) {
            apiKeyInput.value = savedApiKey;
        }

        // Save API key
        saveKeyBtn.addEventListener('click', () => {
            const key = apiKeyInput.value.trim();
            if (key) {
                localStorage.setItem('openai-api-key', key);
                addMessage('ai', 'API key saved successfully!', 'AI Assistant');
            }
        });

        // Populate emoji picker
        emojis.forEach(emoji => {
            const emojiOption = document.createElement('div');
            emojiOption.className = 'emoji-option';
            emojiOption.textContent = emoji;
            emojiOption.addEventListener('click', () => {
                insertAtCursor(emoji);
            });
            emojiPicker.appendChild(emojiOption);
        });

        // Toggle emoji picker
        emojiButton.addEventListener('click', () => {
            emojiPicker.classList.toggle('show');
        });

        // Close emoji picker when clicking outside
        document.addEventListener('click', (e) => {
            if (!emojiButton.contains(e.target) && !emojiPicker.contains(e.target)) {
                emojiPicker.classList.remove('show');
            }
        });

        // Add a message to the chat
        function addMessage(type, content, sender = 'You') {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const messageElement = document.createElement('div');
            messageElement.className = `message ${type}`;
            messageElement.innerHTML = `
                <div class="message-header">
                    <span class="message-sender ${type === 'ai' ? 'ai' : ''}">${sender}</span>
                    <span class="message-time">${timeString}</span>
                </div>
                <div class="message-content">${content}</div>
            `;
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Show typing indicator
        function showTypingIndicator() {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const typingElement = document.createElement('div');
            typingElement.className = 'message ai';
            typingElement.innerHTML = `
                <div class="message-header">
                    <span class="message-sender ai">AI Assistant</span>
                    <span class="message-time">${timeString}</span>
                </div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            `;
            
            chatMessages.appendChild(typingElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            return typingElement;
        }

        // Send message to OpenAI API
        async function sendToAI(message) {
            const apiKey = localStorage.getItem('openai-api-key');
            if (!apiKey) {
                addMessage('ai', 'Please enter your OpenAI API key first.', 'AI Assistant');
                return;
            }

            const typingElement = showTypingIndicator();
            
            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: "gpt-3.5-turbo",
                        messages: [
                            {
                                role: "system",
                                content: "You are a helpful AI assistant integrated into a Windows 11 style chat application. Keep your responses concise and friendly."
                            },
                            {
                                role: "user",
                                content: message
                            }
                        ],
                        temperature: 0.7
                    })
                });

                const data = await response.json();
                
                // Remove typing indicator
                typingElement.remove();
                
                if (data.choices && data.choices[0]) {
                    addMessage('ai', data.choices[0].message.content, 'AI Assistant');
                } else {
                    addMessage('ai', "I couldn't process that request. Please try again.", 'AI Assistant');
                }
            } catch (error) {
                typingElement.remove();
                addMessage('ai', "Sorry, I encountered an error. Please check your API key and try again.", 'AI Assistant');
                console.error('Error calling OpenAI API:', error);
            }
        }

        // Send message
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                addMessage('sent', message);
                messageInput.value = '';
                sendToAI(message);
            }
        }

        // Send on button click
        sendButton.addEventListener('click', sendMessage);

        // Send on Enter key (but allow Shift+Enter for new lines)
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Auto-resize textarea
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        // Helper function to insert text at cursor position
        function insertAtCursor(text) {
            const startPos = messageInput.selectionStart;
            const endPos = messageInput.selectionEnd;
            const beforeText = messageInput.value.substring(0, startPos);
            const afterText = messageInput.value.substring(endPos);
            
            messageInput.value = beforeText + text + afterText;
            messageInput.selectionStart = messageInput.selectionEnd = startPos + text.length;
            messageInput.focus();
            
            // Trigger resize
            const event = new Event('input');
            messageInput.dispatchEvent(event);
        }
    </script>
</body>
</html>
